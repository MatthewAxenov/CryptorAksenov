// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios17.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CryptorAksenov
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreData
import CryptoSwift
@_exported import CryptorAksenov
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class CryptorAksenov {
  #if compiler(>=5.3) && $EffectfulProp
  public static var strings: [Swift.String] {
    get async
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func store(string: Swift.String) async throws
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CoreDataManager {
  public static let shared: CryptorAksenov.CoreDataManager
  public func saveCryptedString(cryptedString: Swift.String)
  public func fetch() -> [CryptorAksenov.CryptedStringsModel]
  public func deleteAll()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CryptedStringsModel) public class CryptedStringsModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CryptorAksenov.CryptedStringsModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CryptorAksenov.CryptedStringsModel>
  @objc @NSManaged dynamic public var stringValue: Swift.String? {
    @objc get
    @objc set
  }
}
extension CryptorAksenov.CryptedStringsModel : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
